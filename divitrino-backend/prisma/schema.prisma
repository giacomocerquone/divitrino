generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(uuid())
  email    String  @unique
  name     String
  password String
  groups   Group[]

  movementsAsPayer Movement[] @relation("payer")
  movementsAsPayee Movement[] @relation("payee")
  products         Product[]
  invites          Invite[]
  addedMovements   Movement[] @relation("movementAddedBy")
}

model Group {
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  id        String     @id @default(uuid())
  name      String
  users     User[]
  movements Movement[]

  invites Invite[]
}

model Movement {
  // COMMON
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  addedBy       User?    @relation("movementAddedBy", fields: [addedByUserId], references: [id])
  addedByUserId String?
  description   String
  group         Group    @relation(fields: [groupId], references: [id])
  groupId       String
  date          DateTime
  payer         User     @relation("payer", fields: [payerId], references: [id])
  payerId       String

  // Purchases fields
  products Product[]

  // Payments fields
  payee   User?   @relation("payee", fields: [payeeId], references: [id])
  payeeId String?
  amount  Int?
}

model Product {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  id             String   @id @default(uuid())
  name           String
  pricePerDebtor Int
  debtors        User[]
  purchase       Movement @relation(fields: [movementId], references: [id])
  movementId     String
}

model Invite {
  id              Int    @id @default(autoincrement())
  invitedBy       User   @relation(fields: [invitedByUserId], references: [id])
  invitedByUserId String
  group           Group  @relation(fields: [groupId], references: [id])
  groupId         String

  used Boolean @default(false)
  code String
}
