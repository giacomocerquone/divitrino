generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String          @id @default(uuid())
  email    String          @unique
  name     String
  password String
  groups   UsersOnGroups[]

  movementsAsPayer Movement[] @relation("payer")
  movementsAsPayee Movement[] @relation("payee")
  products         Product[]
  invites          Invite[]
  addedMovements   Movement[] @relation("movementAddedBy")
}

model UsersOnGroups {
  user    User?   @relation(fields: [userId], references: [id])
  userId  String?
  group   Group   @relation(fields: [groupId], references: [id])
  groupId String
  name    String

  // Extra relation fields
  admin Boolean

  @@id([name, groupId])
}

model Group {
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  id        String          @id @default(uuid())
  name      String
  users     UsersOnGroups[]
  movements Movement[]

  invites Invite[]
}

model Movement {
  // COMMON
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  addedBy       User?    @relation("movementAddedBy", fields: [addedByUserId], references: [id])
  addedByUserId String?
  group         Group    @relation(fields: [groupId], references: [id])
  groupId       String
  date          DateTime
  payer         User     @relation("payer", fields: [payerId], references: [id])
  payerId       String

  // Purchases fields
  products    Product[]
  description String?

  // Payments fields
  payee   User?   @relation("payee", fields: [payeeId], references: [id])
  payeeId String?
  amount  Int?
}

model Product {
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  id             String   @id @default(uuid())
  name           String
  pricePerDebtor Int
  debtors        User[]
  movement       Movement @relation(fields: [movementId], references: [id])
  movementId     String
}

model Invite {
  id              Int    @id @default(autoincrement())
  invitedBy       User   @relation(fields: [invitedByUserId], references: [id])
  invitedByUserId String
  group           Group  @relation(fields: [groupId], references: [id])
  groupId         String

  used Boolean @default(false)
  code String
}
