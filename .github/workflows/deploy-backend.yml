name: Backend deploy

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  build-push-pull-compose-image:
    runs-on: ubuntu-latest
    env:
      working-directory: ./divitrino-backend
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: giacomocerquone/divitrino

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./divitrino-backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy Container to Digitalocean
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

        # script: |
        #   docker pull $IMAGE_ID:$VERSION
        #   docker stop $(docker ps -a -q) || true
        #   docker rm $(docker ps -a -q) || true
        #   docker run -d --restart unless-stopped -p 80:3000 --name divitrino-backend $IMAGE_ID:$VERSION

  # pull-and-compose-image:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy Container to Digitalocean
  #       uses: appleboy/ssh-action@master
  #       with:
  #         host: ${{ secrets.HOST }}
  #         username: ${{ secrets.USERNAME }}
  #         password: ${{ secrets.PASSWORD }}

  #         script: |
  #           echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
  #           IMAGE_ID=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #           # Change all uppercase to lowercase
  #           IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #           # Strip git ref prefix from version
  #           VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #           # Strip "v" prefix from tag name
  #           [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #           # Use Docker `latest` tag convention
  #           [ "$VERSION" == "main" ] && VERSION=latest
  #           echo IMAGE_ID=$IMAGE_ID
  #           echo VERSION=$VERSION

  #           docker pull $IMAGE_ID:$VERSION
  #           docker update --restart=no nextjs-blog || true
  #           docker stop $(docker ps -a -q) || true
  #           docker rm $(docker ps -a -q) || true
  #           docker run -d --restart unless-stopped -p 3000:3000 --name nextjs-blog $IMAGE_ID:$VERSION
